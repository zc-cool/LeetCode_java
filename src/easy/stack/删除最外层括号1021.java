/**
 * @author zhucheng
 * @create 2021-04-21-20:29
 */
package easy.stack;
//有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。例如，""，"()"
//，"(())()" 和 "(()(()))" 都是有效的括号字符串。
//
// 如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。
//
// 给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。
//
// 对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。
//
//
//
// 示例 1：
//
// 输入："(()())(())"
//输出："()()()"
//解释：
//输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，
//删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。
//
// 示例 2：
//
// 输入："(()())(())(()(()))"
//输出："()()()()(())"
//解释：
//输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，
//删除每个部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。
//
//
// 示例 3：
//
// 输入："()()"
//输出：""
//解释：
//输入字符串为 "()()"，原语化分解得到 "()" + "()"，
//删除每个部分中的最外层括号后得到 "" + "" = ""。
//
//
//
//
// 提示：
//
//
// S.length <= 10000
// S[i] 为 "(" 或 ")"
// S 是一个有效括号字符串
//
// Related Topics 栈
// 👍 168 👎 0
public class 删除最外层括号1021 {
    public String removeOuterParentheses(String S) {
        //1.用于接收除去最外层的括号
        StringBuilder sb = new StringBuilder();

        //2.起始索引在1，count用于计数'('的数量：规则，遇到'('加1，遇到')'减1.
        //当count==0的时候，说明从开始到结束的一个原子。
        int begin = 1;
        int count = 0;
        for (int i = 0; i < S.length(); i++) {
            char c = S.charAt(i);
            //如果c == '(' count+1
            if(c == '('){
                count++;
            } else{     //否则count-1
                count--;
                if(count == 0) {  //count是否为0，如果是0则说明到该原子末尾。进行拼接
                    int end = i;
                    sb.append(S.substring(begin, end));
                    if (i + 1 < S.length()) {  //并判断是否到达字符串末尾。
                        begin = i + 2;
                    } else {
                        break;
                    }
                }
            }
        }
        return sb.toString();
    }

}
